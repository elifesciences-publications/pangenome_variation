#!/usr/bin/env python
'''
From a GenBank file and a VCF file
output all non-synonymous mutations
'''

__author__ = "Marco Galardini"
__version__ = '0.1.0'

def get_options():
    import argparse
    import sys

    # create the top-level parser
    description = "Output all mutations impacting a known TFBS"
    parser = argparse.ArgumentParser(description = description,
                                     prog = 'vcf2tfbs')

    parser.add_argument('tfbs', action='store',
                        help='TFBSs table')
    parser.add_argument('vcf', action='store',
                        type=argparse.FileType('rb'),
                        help='VCF stream or file ("-" for STDIN) (chromosome IDs should match)')

    parser.add_argument('--version', action='version',
                         version='%(prog)s '+__version__)

    return parser.parse_args()

if __name__ == "__main__":
    import sys
    import os
    import vcf
    from Bio import SeqIO

    options = get_options()

    vcf_header = ['##fileformat=VCFv4.0',
       '##INFO=<ID=POS,Number=1,Type=String,Description="Position in the TFBS (1-based)">',
       '##INFO=<ID=STRAND,Number=1,Type=String,Description="TFBS strand">',
       '##INFO=<ID=TARGET,Number=1,Type=String,Description="Transcription factor target locus">',
       '##INFO=<ID=TF,Number=1,Type=String,Description="Transcription factor name">',
       '#CHROM\tPOS\tID\tREF\tALT\tQUAL\tFILTER\tINFO']

    # Spit out the vcf header
    for l in vcf_header:
        print(l)

    # Keep in mind all the TFBS and their position
    # May be memory consuming
    tfbs = {}
    for l in open(options.tfbs):
        if l.startswith('#'):
            continue
        tf, lc, start, stop, strand, x1, x2, x3, chrom, x4, x5, x6, x7 = l.split('\t')
        tfbs[chrom] = tfbs.get(chrom, set())
        tfbs[chrom].add( (tf, lc, int(start), int(stop), strand) )

    for r in vcf.Reader(options.vcf):
        # For each TFBS hitting this SNP,
        # output some details
        for x in tfbs[r.CHROM]:
            if (r.POS >= x[2] and r.POS <= x[3]) or len(set(range(r.POS, r.POS+len(str(r.REF)))).intersection(range(x[2], x[3]+1))) != 0:
                # Only SNPs allowed here
                # Consider multiple SNPs in the same long variant!
                for var in r.ALT:
                    muts = []
                    if r.is_indel:
                        if len(str(r.REF)) != len(str(var)):
                            continue
                        for ref, alt, pos in zip(str(r.REF), str(var), range(r.POS, r.POS+len(str(r.REF)))):
                            if ref != alt:
                                muts.append( (pos, ref, alt) )
                    else:
                        muts.append( (r.POS, r.REF, str(var)) )
                    
                    for pos, ref, n in muts:
                        # Only allow the SNPS inside the TFBS
                        if pos not in range(x[2], x[3]+1):
                            continue
                        # Derive the position in the TFBS using the strand information
                        if x[-1] == '+':
                            position = pos - x[2] + 1
                        elif x[-1] == '-':
                            position = -pos +x[3] + 1
                        else:
                            # Contradictory information
                            position='?'
                        print('\t'.join([str(x) for x in [r.CHROM,
                            pos,
                            '.',
                            ref,
                            n,
                            '.',
                            'PASS',
                            'POS=%s;TF=%s;STRAND=%s;TARGET=%s'%(position, x[0], x[-1], x[1]),]]))
                            
