#!/usr/bin/env python

# Copyright (C) <2015> EMBL-European Bioinformatics Institute

# This program is free software: you can redistribute it and/or
# modify it under the terms of the GNU General Public License as
# published by the Free Software Foundation, either version 3 of
# the License, or (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.

# Neither the institution name nor the name align_upstreams can
# be used to endorse or promote products derived from this
# software without prior written permission. For written
# permission, please contact <marco@ebi.ac.uk>.

# Products derived from this software may not be called
# align_upstreams nor may align_upstreams appear in their names
# without prior written permission of the developers.
# You should have received a copy of the GNU General Public
# License along with this program. If not, see
# <http://www.gnu.org/licenses/>.

__author__ = "Marco Galardini"
__version__ = "0.0.1"

def get_options():
    import argparse

    # create the top-level parser
    description = "Concatenate core genome alignments from roary results"
    parser = argparse.ArgumentParser(description = description,
                                     prog = 'roary2aln')
    parser.add_argument('table', action='store',
                        help='Input presence/absence file')
    parser.add_argument('alndir', action='store',
                        help='Alignments directory')

    parser.add_argument('--version', action='version',
                         version='%(prog)s '+__version__)

    return parser.parse_args()

if __name__ == "__main__":
    import os
    import sys
    import pandas as pd
    import numpy as np
    from Bio import SeqIO

    options = get_options()

    roary = pd.read_table(options.table,
                         sep=',',
                         low_memory=False)
    roary.set_index('Gene', inplace=True)
    roary.drop(list(roary.columns[:13]), axis=1, inplace=True)
    roary.replace('.{2,100}', 1, regex=True, inplace=True)
    roary.replace(np.nan, 0, regex=True, inplace=True)
    rsum = roary.sum(axis=1)
    core = list(rsum[rsum == rsum.max()].index)

    d = {}
    for g in core:
        try:
            sys.stderr.write(g)
            sys.stderr.write('\n')
            dtmp = {}
            for s in SeqIO.parse(os.path.join(options.alndir, '%s.fa.aln'%g),
                                 'fasta'):
                sid = '_'.join(s.id.split('_')[:2])
                if sid.startswith('b'):
                    sid='reference'
                dtmp[sid] = s
            if len(dtmp) != rsum.max():
                sys.stderr.write('skipping '+g)
                sys.stderr.write('\n')
                continue
            for sid, s in dtmp.items():
                d[sid] = d.get(sid, s)
                d[sid] += s
                d[sid].id = sid
        except IOError:
            sys.stderr.write('skipping '+g)
            sys.stderr.write('\n')

    SeqIO.write(d.values(), sys.stdout, 'fasta')
