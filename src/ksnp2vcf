#!/usr/bin/env python
# Copyright (C) <2015> EMBL-European Bioinformatics Institute

# This program is free software: you can redistribute it and/or
# modify it under the terms of the GNU General Public License as
# published by the Free Software Foundation, either version 3 of
# the License, or (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.

# Neither the institution name nor the name pangenome_variation
# can be used to endorse or promote products derived from
# this software without prior written permission.
# For written permission, please contact <marco@ebi.ac.uk>.

# Products derived from this software may not be called pangenome_variation
# nor may pangenome_variation appear in their names without prior written
# permission of the developers. You should have received a copy
# of the GNU General Public License along with this program.
# If not, see <http://www.gnu.org/licenses/>.

__author__ = "Marco Galardini"
__version__ = '0.1.0'

def get_options():
    import argparse
    import sys

    # create the top-level parser
    description = "Convert a kSNP VCF file into a single strain VCF"
    parser = argparse.ArgumentParser(description = description,
                                     prog = 'ksnp2vcf')

    parser.add_argument('vcf', action='store',
                        help='kSNP VCF file')
    parser.add_argument('strain', action='store',
                        help='Strain to be extracted')

    parser.add_argument('--version', action='version',
                         version='%(prog)s '+__version__)

    return parser.parse_args()

if __name__ == "__main__":
    import vcf

    options = get_options()

    vcf_header = ['##fileformat=VCFv4.0',
       '#CHROM\tPOS\tID\tREF\tALT\tQUAL\tFILTER\tINFO']

    # Spit out the vcf header
    for l in vcf_header:
        print(l)

    for r in vcf.Reader(options.vcf):
        if r.genotype(options.strain).called and r.genotype(strain).gt_nums == '1':
            print('\t'.join([str(x) for x in [r.CHROM,
                r.POS,
                '.',
                r.REF,
                n,
                '.',
                'PASS',
                '.',]]))
