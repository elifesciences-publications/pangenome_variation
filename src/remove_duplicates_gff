#!/usr/bin/env python
# Copyright (C) <2015> EMBL-European Bioinformatics Institute

# This program is free software: you can redistribute it and/or
# modify it under the terms of the GNU General Public License as
# published by the Free Software Foundation, either version 3 of
# the License, or (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.

# Neither the institution name nor the name pangenome_variation
# can be used to endorse or promote products derived from
# this software without prior written permission.
# For written permission, please contact <marco@ebi.ac.uk>.

# Products derived from this software may not be called pangenome_variation
# nor may pangenome_variation appear in their names without prior written
# permission of the developers. You should have received a copy
# of the GNU General Public License along with this program.
# If not, see <http://www.gnu.org/licenses/>.

__author__ = "Marco Galardini"
__version__ = '0.1.0'

def get_options():
    import argparse

    # create the top-level parser
    description = "Handle duplications in gff files"
    parser = argparse.ArgumentParser(description = description,
                                     prog = 'remove_duplicates_gff')

    parser.add_argument('ingff', action='store',
                        help='Input GFF file')
    parser.add_argument('outgff', action='store',
                        help='GFF file')

    parser.add_argument('--version', action='version',
                         version='%(prog)s '+__version__)

    return parser.parse_args()

if __name__ == "__main__":
    options = get_options()

    from BCBio import GFF

    seqs = []

    for s in GFF.parse(options.ingff):
        for f in s.features:
            if f.type != 'CDS':
                continue
            d[f.qualifiers['locus_tag'][0]] = d.get(f.qualifiers['locus_tag'][0], 0)
            d[f.qualifiers['locus_tag'][0]] += 1
            if d[f.qualifiers['locus_tag'][0]] > 1:
                f.qualifiers['locus_tag'][0] = '%s_%d'%(f.qualifiers['locus_tag'][0],
                                                       d[f.qualifiers['locus_tag'][0]]-1)
        seqs.append(s)

    GFF.write(seqs,
            open(options.outgff, 'w'),
            include_fasta=True)

